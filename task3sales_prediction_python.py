# -*- coding: utf-8 -*-
"""task3sales-prediction-python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YdNihcKQy2TfprCjw5qxPrHYU_DZlPzy
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Step 1: Load the dataset
df = pd.read_csv('Advertising.csv')

# Display the first few rows of the dataset
print("First few rows of the dataset:")
print(df.head())

# Display information about the dataset
print("\nDataset info:")
print(df.info())

# Display descriptive statistics
print("\nDescriptive statistics:")
print(df.describe())

# Step 2: Feature Engineering
# Check for missing values
print("\nMissing values in the dataset:")
print(df.isnull().sum())

# Select features and target variable
X = df[['TV', 'Radio', 'Newspaper']]  # Features
y = df['Sales']  # Target variable

# Step 3: Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Train a Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 5: Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("\nModel Evaluation:")
print(f'Mean Squared Error: {mse}')
print(f'R^2 Score: {r2}')

# Step 6: Visualize the results
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='blue')
plt.xlabel('Actual Sales')
plt.ylabel('Predicted Sales')
plt.title('Actual Sales vs Predicted Sales')
plt.show()